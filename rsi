import ccxt
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
import asyncio
import nest_asyncio
from telegram import Bot
import config  # Import the config module
import ta  # Import ta library

interval = '1d'  # 1-day candlesticks

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
})

# Dictionary to store the last alert messages for each symbol
last_alert_messages = {}

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=300):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to calculate RSI using ta library
def calculate_rsi(df, period=14):
    return ta.momentum.RSIIndicator(df['close'], window=period).rsi()

# Function to check RSI cross
def check_rsi_cross(df):
    df['rsi_14'] = calculate_rsi(df, period=14)
    df['rsi_200'] = calculate_rsi(df, period=200)

    # Detect cross over and cross under
    cross_over = df['rsi_14'].iloc[-3] < df['rsi_200'].iloc[-3] and df['rsi_14'].iloc[-2] > df['rsi_200'].iloc[-2]
    cross_under = df['rsi_14'].iloc[-3] > df['rsi_200'].iloc[-3] and df['rsi_14'].iloc[-2] < df['rsi_200'].iloc[-2]

    return cross_over, cross_under

# Function to plot RSI chart and return image buffer
def plot_rsi_chart(df, symbol, title):
    # Calculate RSI
    df['rsi_14'] = calculate_rsi(df, period=20)
    df['rsi_200'] = calculate_rsi(df, period=200)

    fig, ax = plt.subplots(figsize=(12, 6))

    # Plotting the RSI
    ax.plot(df.index, df['rsi_14'], label='RSI (20)', color='blue')
    ax.plot(df.index, df['rsi_200'], label='RSI (200)', color='green')
    ax.set_xlabel('Timestamp')
    ax.set_ylabel('RSI')
    ax.axhline(30, linestyle='--', color='red')  # Oversold line
    ax.axhline(70, linestyle='--', color='green')  # Overbought line
    ax.set_title(title)
    ax.legend()

    plt.tight_layout()

    # Save plot to a BytesIO object
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    return buf

# Function to send Telegram message and image (now defined as async)
async def send_telegram_message(symbol, message, image_buffer):
    # Check if the current message is the same as the previous one for this symbol
    if last_alert_messages.get(symbol) != message:
        await telegram_bot.send_message(chat_id=config.CHAT_ID, text=message)
        # Send image
        await telegram_bot.send_photo(chat_id=config.CHAT_ID, photo=image_buffer)
        # Update the last alert message for this symbol
        last_alert_messages[symbol] = message

# Main function (now defined as async)
async def main():
    while True:
        for symbol in config.SELECTED_SYMBOLS:
            try:
                historical_data = get_historical_data(symbol, interval)
                cross_over, cross_under = check_rsi_cross(historical_data)

                if cross_over:
                    message = f'RSI 14 crossed above RSI 200 on #{symbol}'
                    title = f'RSI Cross Over for {symbol}'
                    # Plot and get image buffer
                    image_buffer = plot_rsi_chart(historical_data, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer)
                elif cross_under:
                    message = f'RSI 14 crossed below RSI 200 on #{symbol}'
                    title = f'RSI Cross Under for {symbol}'
                    # Plot and get image buffer
                    image_buffer = plot_rsi_chart(historical_data, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer)

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        # Sleep for a specified interval before checking again
        await asyncio.sleep(300)  # Adjust the sleep duration as needed

# Initialize Telegram Bot
telegram_bot = Bot(token=config.TELEGRAM_TOKEN)

# Use nest_asyncio to allow running asyncio in Jupyter notebooks
nest_asyncio.apply()

# Create and run the event loop
asyncio.run(main())
